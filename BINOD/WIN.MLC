*******************************************************
*                   REFERENCES                        *
*******************************************************
*        MODULE - WIN                                 *
*        SYSTEM - PC/370 CROSS ASSEMBLER              *
*        AUTHOR - BERNABE LLOVERA                     *
*        DATE   - NOVEMBER 1995                       *
*******************************************************
*                                                     *
*     PROGRAM ENTRY POINT: WIN                        *
*     OTHER ENTRY POINTS:                             *
*        PRINTS   = PRINT DCB ADDRESS                 *
*        SWDISCO  = DISCONNECT SWITCH                 *
*        AREA1    = RECEIVE DATA AREA                 *
*        AREA1END = RECEIVE DATA AREA LIMIT           *
*                                                     *
*     EXTERNAL REFERENCES:                            *
*        PARMLIST = PARAMETER FOR SCREEN AND PRINT    *
*        BOXPARML = BOX (TOP ROW/COL) (BOT ROW/COL)   *
*        SCREENL  = OUTPUT STRING LENGTH              *
*        SCREEN   = SCREEN OUTPUT BUFFER              *
*        SYSTEMCD = SYSTEM NAME                       *
*        PANLENG  = PANEL LENGTH SAVE AREA FOR APPLCS *
*                                                     *
*******************************************************
*        ENTRY WIN,PRINTS,SWDISCO
*        ENTRY AREA1,AREA1END
*        EXTRN PARMLIST,BOXPARML,SCREENL,SCREEN,INSCRN,INSCRNL
*        EXTRN PANLENG
*
*        PRINT NOGEN
         TITLE '                                * * *  MAINLINE  * * *'
**************************************************************
*
*      MAINLINE PROGRAM
*
**************************************************************
WIN      CSECT
         ENTRY
XX6      STM   R14,R12,12(R13) SAVE IN CALLERS SAVE AREA
         LR    R12,R15         USE ENTRY ADDRESS
         USING XX6,R12,R11
         LA    R15,XX6SAV1     GET PROGRAMS SAVE AREA ADDR
         ST    R13,4(R15)      SAVE CALLERS SAVE AREA ADDR
         ST    R15,8(R13)      SAVE PROGRAMS SAVE AREA IN CALLERS AREA
         LR    R13,R15         GET PROGRAMS SAVE AREA ADDR
         L     R11,XX6SAV2     LOAD 2ND BASE REG
         B     AROUND          SKIP SAVE AREA FLD
XX6SAV1  DS    18F             RETURN SAVE REGS AREA
XX6SAV2  DC    A(XX6+4096)     2ND BASE REG ADDR
         DC    CL12'<<WIN>>'   DUMP PROGRAM ID
AROUND   DS    0H
*
*        XFILI =C'CON:'         INPUT ON CONSOLE
         CALL  VAL,INITIAL      SET INITIAL MENU TREE
*        OPEN  (PRINTS,(OUTPUT))
*        AIPSTART               START SESSION
         B     OPENOK
VERSION  DC    C'DATE OF LAST CHANGE 9/26/95.'
OPENOK   DS    0H
         BAL   R14,LOGON
         LTR   R15,R15          TEST FOR ERRORS
         BNZ   DUMP
**************************************************************
*      REQUEST INPUT FROM ANY LOGICAL UNIT
**************************************************************
RECANY   DS    0H
*        XC    AREA1(250),AREA1          ROLL IT OFF
*        XC    AREA2(250),AREA2          ROLL IT OFF
*        XC    AREA3(250),AREA3          ROLL IT OFF
*        XC    AREA4(250),AREA4          ROLL IT OFF
*        APIREAD
*        LTR   R15,R15          TEST FOR ACCEPTANCE
*        BNZ   RECANY           NO, CONTINUE WITH NEXT INPUT
*        APIWRITE
*        LTR   R15,R15               TEST FOR SUCCESSFUL COMPLETION
*        BNZ   DUMP                  DUMP IF SEND COULD NOT BE SCHED
**************************************************************
*
*      PROCESS INPUT AND PREPARE REPLY
*
**************************************************************
TEST1    EQU   *
CLOSETST DS    0H
         CLC   AREADATA(5),=C'CLOSE' IS CLOSE ACB REQUESTED
         BE    SETCLSF               SET CLOSE FLAG
         CLC   AREADATA(5),=X'839396A285' LOWER CASE CLOSE
         BNE   TEST2                 NO, SKIP CLOSE FLAG
SETCLSF  DS    0H
         OI    TPENDFLG,X'80'        SET ON TPEND FLAG TO CLOSE ACB
TEST2    DS    0H
         CLI   AREACODE,X'7C'        (PF12) IS THIS A DUMP REQ?
         BE    DUMP                  YES, ABEND AND DUMP
         CLI   AREACODE,X'6D'        IS THIS A CLEAR SCREEN REQ?
         BE    SHOWECHO              NO, SHOW ECHO
         CLI   LOGONSW,X'00'         ARE WE LOGGING ON?
         BE    LOGONTST              YES, GO TEST PASSWORD
         CLI   SIGNSW,X'01'          ARE WE SIGNNING OFF?
         BE    SIGNOFFT              YES, GO TEST (YES OR NO)
         CLI   AREACODE,X'F1'        (PF1) IS THIS A HELP REQ?
         BE    CALLPROC              YES, CALL HELP ROUTINE
FROMLGN  DS    0H                    FROM LOG ON
FROMSGO  DS    0H                    FROM SIGN OFF
         CLI   AREACODE,X'7D'        IS THIS AN ENTER?
         BE    CALLPROC              YES, GO TO ENTER
         CLI   AREACODE,X'7A'        (PF10) IS THIS A LEFT MOVE?
         BE    CALLPROC              YES, GOTO PROCESS
         CLI   AREACODE,X'F3'        IS THIS AN EXIT PROGRAM REQ?
         BE    TEST21                YES, CHECK KEY
*        CLI   AREACODE,X'7B'        (PF11) IS THIS A RITE MOVE?
*        BNE   TEST21                NO, SKIP CALL
CALLPROC DS    0H
         CALL  WINDOWS,AREA1,AREA1END  DATA PROCESSING MODULE
         B     SHOWECHO              REPEAT THE SAME
CALLHELP DS    0H
         L     R8,SCREENA            POINT TO COMMON OUTPUT AREA LENGTH
         L     R15,=V(PANLENG)       POINT TO COMMON OUTPUT AREA LENGTH
         MVC   0(4,R15),0(R8)        SAVE PANEL LENGTH FOR AFTER SEND
         CALL  BUFFPRO,INSCRN,INSCRNL,HELPARM3  COBOL STYLE PARMS
         MVI   SWHELP,X'01'          WE ARE DOING HELP
         B     SHOWECHO
TEST21   DS    0H
         CLI   AREACODE,X'F3'        IS THIS AN EXIT PROGRAM REQ?
         BNE   TEST22                NO, GO ON
         CLI   SWDISCO,X'00'         IS IT READY FOR DISCONNECT?
         BE    LASTQUE               YES, ASK CONFIRMATION
         B     CALLPROC              NO, GO CALL PROCESS
TEST22   DS    0H
SHOWECHO DS    0H
         BAL   R14,SAMESCR           POINT TO LAST PANEL
         B     SENDD                 AND SHOW IT
LASTQUE  DS    0H
         CALL  VAL,BACKOFF           TRY TO BACK OFF ONE SYSTEM
         C     R15,=F'1'             ARE EW AT THE SISTEM TREE TOP?
         BE    LASTQUE1              YES, PROCEED WITH SIGNOFF
*******************************************************
*   RESET TO BACKOFF SYSTEM ~                         *
*******************************************************
         MVI   SIGNSW,X'00'          TURN SIGN OFF SW OFF
         MVC   AREA1(3),=X'7D0000'   SIMULATE AN ENTER
         B     CALLPROC              YES, DO SYSTEM
LASTQUE1 DS    0H
         CLI   SIGNSW,X'01'          ALREADY IN SIGN OFF PANEL?
         BE    SIGNBK                YES, BACK OFF SIGN OFF
         MVI   SIGNSW,X'01'          TURN SIGN OFF SW ON
*
         MVI   MAIPARM,C'C'          INDICATE CLEAR SCREEN
         L     R8,MAIPLST            GET PROCESS PARAMETER LIST
         MVC   0(9,R8),MAIPARM       MOVE PARAM LIST
         L     R8,MAIBOXPL           GET BOX PARAMETER LIST
         MVC   0(12,R8),MAIBXPLS     MOVE BOX PARAM LIST
         CALL  OUTSTRN,BOXIND        GENERATE LAST PANEL
*
         MVI   MAIPARM,C'N'          INDICATE NO CLEAR SCREEN
         MVC   MAIADDR,=A(SIGNOFF)   PUT SIGN OFF PANEL ADDRESS
         L     R8,MAIPLST            GET PROCESS PARAMETER LIST
         MVC   0(9,R8),MAIPARM       MOVE PARAM LIST
         CALL  OUTSTRN,PANIND        GENERATE LAST PANEL
         BAL   R14,SAMESCR           POINT TO LAST PANEL
         B     SENDD                 OTHERWISE DO ECHO
SIGNBK   DS    0H
         MVI   SIGNSW,X'00'          TURN SIGN OFF SW OFF
         B     FROMSGO               JUST THIS & GO BACK TO ENTER
*        L     R8,MAIPLST            GET PROCESS PARAMETER LIST
*        MVC   0(9,R8),=X'C30000000000000000' JUST CLEAR SCREEN
*        CALL  OUTSTRN,PANIND        GENERATE LAST PANEL
*        BAL   R14,SAMESCR           POINT TO LAST PANEL
*        B     SENDD                 AND SHOW IT
LOGONTST DS    0H
         CLI   AREACODE,X'F1'        (PF1) IS THIS A HELP REQ?
         BE    CALLHELP              YES, CALL HELP ROUTINE
         CLI   AREACODE,X'F3'        IS THIS AN EXIT PROGRAM REQ?
         BE    DISCNECT               YES, SPLIT
*        CLC   AREA1+1(2),=XL2'D860'  ARE WE AT THE PASSWORD?
*        BE    PASSCHCK               YES, GO CHECK PASSWORD
*        CLC   AREA1+4(2),=XL2'142F'  20/48 ARE WE AT THE PASSWORD?
         CLC   AREA1+4(2),=XL2'1431'  20/50 ARE WE AT THE PASSWORD?
         BE    PASSCHCK               YES, GO CHECK PASSWORD
         L     R8,MAIPLST             GET PROCESS PARAMETER LIST
         MVI   0(R8),C'C'             INDICATE CLEAR SCREEN
         B     LOGOPRT                PRINT LOGO BACK
PASSCHCK DS    0H
         OC    AREADATA(6),=X'404040404040' CHANGE TO UPPER CASE
         CLC   AREADATA(6),=C'AAAAAA' PASSWORD OK?
         BE    LOGONSGN               YES, LOGON
         L     R8,MAIPLST             GET PROCESS PARAMETER LIST
         MVI   0(R8),C'C'             INDICATE CLEAR SCREEN
         MVC   5(4,R8),=A(ERRPSW)     MOVE MESSAGE ADDRESS
         CALL  OUTSTRN,PANIND         GENERATE OUT STRING / ADDR LIST
         MVI   0(R8),C'N'             INDICATE NO CLEAR SCREEN
LOGOPRT  DS    0H
         L     R15,=A(INIPLST)        GET LOGON PARM LIST ADDRESS
         L     R8,0(R15)              GET LOGON PARM LIST ADDRESS
         L     R15,=A(INIPARM)        GET LOGON PARM LIST ADDRESS
         MVC   1(8,R8),1(R15)         MOVE LOGON PARAMETERS
         CALL  OUTSTRN,PANIND         BUILD OUT STRING / ADDR LIST
         B     SHOWECHO               NO, ECHO AND WAIT FOR ANOTHER
LOGONSGN DS    0H
         MVI   LOGONSW,X'01'          SET LOGON SW OFF
         B     FROMLGN                JUST THIS AND ENTER
*        L     R8,MAIPLST             GET PROCESS PARAMETER LIST
*        MVC   0(9,R8),=X'C30000000000000000' JUST CLEAR SCREEN
*        CALL  OUTSTRN,PANIND         GENERATE LAST PANEL
*        BAL   R14,SAMESCR            POINT TO LAST PANEL
*        B     SENDD                  AND SHOW IT
SIGNOFFT DS    0H
         CLI   AREACODE,X'F1'         (PF1) IS THIS A HELP REQ?
         BE    CALLHELP               YES, CALL HELP ROUTINE
         CLI   AREA1+3,X'11'          ANY ORDERS BACK?
         BNE   SIGNOORD               NO, SKIP ORDER PROCESSING
         CLI   AREA1+6,C' '           INPUT DATA STRING = BLANKS?
         BE    SIGNOORD               NO, SKIP ORDER PROCESSING
         MVC   AREA1+1(2),AREA1+4     USE FLD ADDR INSTEAD OF CURSOR
SIGNOORD DS    0H
         CLC   AREA1+1(2),=XL2'0E30'  14,48 IS THIS A YES?
         BE    SGNLGOFF               YES, LOGOFF
         CLC   AREA1+1(2),=XL2'0E25'  14,37 IS THIS A NO?
         BE    SIGNBK                 NO, BACK TO KEY TEST
         MVI   SIGNSW,X'00'           TURN SIGN OFF SW OFF
         B     LASTQUE1               REPEAT SIGN OFF PANEL
SGNLGOFF DS    0H
         MVI   LOGONSW,X'00'          SET LOGON SW ON
         MVI   SIGNSW,X'00'           SET SIGN OFF SW OFF
         B     DISCNECT               YES, SPLIT
*
**************************************************************
*      CLEAR SESSION & SEND PREPARED REPLY
**************************************************************
SENDD    DS    0H
*------- CALL  SEND                  SEND DATA TO SCREEN
         L     15,=A(SEND)
         BALR  14,15
         MVC   DATAINX,=CL10' '      CLEAR BUFF
         CLI   LOGONSW,X'00'         ARE WE LOGGING ON?
         BNE   NOTLOGON              NO, GO CHECK NEXT
******** CALL  RECEIVE,FIELDCUR
         L     1,=A(FIELDCUR)
         L     15,=A(RECEIVE)
         BALR  14,15
*        XREAD DATAINX,6             READ FOR TEST
*        MVC   AREADATA(6),DATAINX
*        MVC   AREA1(3),=X'7D0000'    SIMULATE AN ENTER  *** TEST ***
*        MVC   AREA1+1(2),=XL2'D860'   AT PASSWORD    *** TEST ***
         B     NEXTHING
NOTLOGON DS    0H
******** CALL  RECEIVE,FIELDCUR
         L     1,=A(FIELDCUR)
         L     15,=A(RECEIVE)
         BALR  14,15
         B     NEXTHING
*
         XREAD DATAINX,1              READ FOR TEST
         CLI   DATAINX,C'X'           NOTHING OR ENTER
         BNE   NEXT01
         MVC   AREA1(3),=X'7D030A'    ENTER
         B     NEXTHING
NEXT01   DS    0H
         CLI   DATAINX,C'D'           RIGHT
         BNE   NEXT02
         MVC   AREA1(3),=X'7B0000'    RIGHT
         B     NEXTHING
NEXT02   DS    0H
         CLI   DATAINX,C'S'           LEFT
         BNE   NEXT03
         MVC   AREA1(3),=X'7A0000'    LEFT
         B     NEXTHING
NEXT03   DS    0H
         CLI   DATAINX,C'Q'           ESC
         BNE   NEXT04
         B     DISCNECT               QUIT FOR NOW
NEXT04   DS    0H
         CLI   DATAINX,C'E'           ESC
         BNE   NEXT05
         MVC   AREA1(3),=X'F30000'    ESC
*        B     LASTQUE1               CONFIRM EXIT *** TEST ***
NEXT05   DS    0H
NEXTHING DS    0H
*        APIWRITE
*        LTR   R15,R15               SEND SUCCESSFULL
*        BNZ   DUMP
**************************************************************
         CLI   SWHELP,X'01'          ARE WE DOING HELP?
         BNE   SKIPREST              NO, DON'T RESET PANEL LENGTH
         L     R8,SCREENA            POINT TO COMMON OUTPUT AREA LENGTH
         L     R15,=V(PANLENG)       POINT TO COMMON OUTPUT AREA LENGTH
         MVC   0(4,R8),0(R15)        RESTORE PANEL FORMER LENGTH
         XC    0(4,R15),0(R15)       RESET PANEL RESTORE LENGTH
SKIPREST DS    0H
         XC    SWHELP,SWHELP         RESET HELP SWITCH
**************************************************************
CHCKTPND CLI   TPENDFLG,X'80'        SEE IF TPEND IS SIGNALLED
         BNE   RECANY                IF NOT, BRANCH BACK TO RECEIVE
**************************************************************
*      CLOSE THE PROGRAM TERMINATING ALL SESSIONS
**************************************************************
DUMP     DS    0H
DISCNECT DS    0H                    SPLIT
RETURN1  MVI   TPENDFLG,X'FF'        SIGNAL CLOSE IN PROGRESS TO
         BAL   R14,CLRS              CLEAR SCREEN
*                                    EXITS
*        CLOSE (PRINTS)
         EXIT  SAVE=YES
*
**************************************************************
*       SAMESCR - LOAD POINTERS FOR SAME PANEL AS BEFORE
**************************************************************
SAMESCR  DS    0H
         L     R9,SCREENA       POINT TO COMMON OUTPUT AREA LENGTH
         LA    R8,4(R9)         POINT TO COMMON OUTPUT AREA
         L     R9,0(R9)         GET AREA LENGTH
         BR    R14
*
********************************************************************
*      CLEAR SCREEN                                                *
*      ON ENTRY:                                                   *
********************************************************************
CLRS     DS    0H
         ST    R14,RTCLR2              PUSH EM REGS
*
         LA    R0,X'0600'              SCROLL
         LA    R14,X'0000'             START ROW/COL (0,0)
         LH    R15,=H'6223'            END ROW/COL X'184F' (24,79)
         LH    R1,=H'1792'             X'0700' ATTRIBUTE (NORMAL)
         SVC   144                     128+16 X'10'
*
         L     R14,RTCLR2
         BR    R14
*
RTCLR2   DS    F                       POP EM REGS
**************************************************************
*
*      LOGON EXIT ROUTINE
*
**************************************************************
LOGON    DS    0H
         ST    R14,LOGNSA         PUSH THEM REGS
         STM   R1,R10,LOGNRR
*        MVI   MSGAREA,C'*'
*        MVC   MSGAREA+1(79),MSGAREA
*
SNDFIRST EQU   *
         L     R10,INIPLST        GET PARAMETER LIST ADDRESS
         MVC   0(9,R10),INIPARM   MOVE PARAMETERS
         CALL  OUTSTRN,PANIND1    BUILD OUT STRING / ADDR LIST
         L     R10,INILOGO        POINT TO COMMON OUTPUT AREA LENGTH
         LA    R9,4(R10)          POINT TO COMMON OUTPUT AREA
         L     R10,0(R10)         GET AREA LENGTH
*------- CALL  SEND               SEND DATA TO SCREEN
         L     15,=A(SEND)
         BALR  14,15
******** CALL  RECEIVE,FIELDCUR
         L     1,=A(FIELDCUR)
         L     15,=A(RECEIVE)
         BALR  14,15
*        XREAD DATAINX,6          READ PASSWORD
*        MVC   AREADATA(6),DATAINX
*        MVC   AREA1(3),=X'7D0000'    SIMULATE AN ENTER  *** TEST ***
*        MVC   AREA1+1(2),=XL2'D860'   AT PASSWORD    *** TEST ***
         CLI   AREADATA,C'Q'           ESC
         BNE   RETURN2
         B     DISCNECT           QUIT FOR NOW
*        APIWRITE
*        LTR   R15,R15            SEND SUCCESSFULY
*        BNZ   CANCEL2
*                                        SYNAD WILL HAVE CLSDST FOR US
RETURN2  DS    0H
         LM    R1,R10,LOGNRR      POP THEM REGS
         L     R14,LOGNSA
         SR    R15,R15
         BR    R14
*
DATAINX  DC    CL20' '
LOGNSA   DS    10F                PUSH THEM REGS
LOGNRR   DS    F
**************************************************************
**************************************************************
*
*              MAINLINE PROGRAM CONSTANTS
*
**************************************************************
         DS    0D
         ENTRY PRINTS
PRINTS   EQU   *
*PRINTS   DCB   DDNAME=SYSUT2,RECFM=FBA,LRECL=132,DSORG=PS,
*               DEVD=DA,MACRF=PM,BLKSIZE=1320
R1CONTS  DC    F'0'            SAVE AREA FOR REG 1 IN DUMP
ECBLST   DC    A(RCVECB)
         DC    X'80'           END OF ECB LIST MARKER
         DC    AL3(TPENDECB)
RCVECB   DC    F'0'            ECB USED FOR RECANY
TPENDECB DC    F'0'            ECB POSTED BY TPEND EXIT
TPENDFLG DC    X'00'           FLAG SET BY MAINLINE TO FORCE CLOSE
RESETCAF DC    X'00'           RESETSR CA NEEDED IF 00
SAVE0    DC    18F'0'          SAVE AREA NEEDED FOR MAINLINE
INITIAL  EQU   *               EXT REF OR ENTRY BUG
         DC    CL8'INITIAL'    INITIAL SYSTEM MENU TREE
BACKOFF  EQU   *               ENTRY POINT BUG
         DC    CL8' '          BACKOFF SYSTEM MENU TREE
******************************************************
         ENTRY SWDISCO
SWDISCO  EQU   *
         DC    X'00'        DISCONNECT SWITCH
******************************************************
SCREENA  DC    V(SCREENL)   COMMON OUTPUT STRING AREA ADDRESS
MAIPLST  DC    V(PARMLIST)  COMMON OUTPUT STRING AREA ADDRESS
MAIPARM  DC    CL1'C'       PARAMETER FOR CLEAR SCREEN AND PRINT
         DC    AL1(0,0,0,0) CLEAR COORDINATES
MAIADDR  DC    AL4(SIGNOFF) PANEL INSTRUCTIONS ADDRESS
******************************************************
MAIBOXPL DC    V(BOXPARML)  BOX PARAMETER LIST ADDRESS
MAIBXPLS DC    AL1(11,19,15,62)  R/C R/C AND PARAMETER LIST
MAIBXCHR DC    CL8'+-+||+-+' BOX CHARACTERS
BOXIND   EQU   *            EXT REF BUG
         DC    CL3'BOX'     BOX INDICATOR FOR CALL PROCESS
PANIND   EQU   *            EXT REF BUG
         DC    CL3' '       PANEL INDICATOR FOR CALL PROCESS
******************************************************
APPL1    DC    X'08'           APPLID FOR ACB
         DC    CL8'XMVTAM1'
ERRPSW   EQU   *
 DC X'1620E812',C'INVALID PASSWORD',X'1D6000'
*
LOGONSW  DC    X'00'           LOGON SWITCH
SIGNSW   DC    X'00'           SIGN OFF SWITCH
SIGNOFF  DC    AL1(12,34),X'60',AL1(11) R/C/A/L
         DC    CL11' EXIT DBG? '
         DC    AL1(14,33),X'E8',AL1(2),CL2'NO'
         DC    AL1(14,36),X'40',AL1(5),X'4013',C' ',X'1D60'
         DC    AL1(14,43),X'E4',AL1(3),CL3'YES'
         DC    AL1(14,47),X'E8',AL1(5),X'1D40',C' ',X'1D60'
         DC    X'00'                    PANEL END
*
CURSFLD  DC    X'114A4F1D4013' SBA R9C16  ATT U CURSOR
TMARK    DC    C'1A'           TRACE PASSED THRU MARK
TRCSAVA  DS    16F             TRACE ALL REGS SAVE AREA
         DC    C'DEGUB MAIN'
DBGMA    DC    PL3'0'          COUNT TIMES PASSED THRU
SWHELP   DC    X'00'           HELP SWITCH
*
* APPLICATION PROCESSING STATUS SWITCH
APPLPARM EQU   *               APPLICATION PARAMETER LIST
PROSWIT  DC    CL3' '          'END'=DON'T GO BACK '   '=GO BACK
INPUTKEY DC    C' '            INPUT KEY TO PASS TO APPLICATION
*
* HELP PROCEDURE PARAMETER LIST (FOR TEST)
         DC    V(INSCRN)       COMMON WORK SCREEN ADDR
         DC    V(INSCRNL)      COMMON WORK SCREEN LIMIT ADDR
HELPARM3 EQU   *               EXT REF BUG
         DC    C' '            CLEAR SCREEN INDICATOR
         DC    C'00000000'     CLEAR COORDINATES
         DC    C'01'           INCERT CURSOR ROW
         DC    C'01'           INCERT CURSOR COLUMN
         DC    C'05'           BOX TOP ROW
         DC    C'03'           BOX TOP LEFT COLUMN
         DC    C'20'           BOX BOTTOM ROW
         DC    C'77'           BOX BOTTOM RITE COLUMN
         DC    C'+-+||+-+'     BOX CHARACTERS
*
**************************************************************
*       INPUT RECEIVE AREA
**************************************************************
         DC    C'VTAM INPUT AREA'
         DS    0H
         ENTRY AREA1
AREA1    EQU   *
         DS    0CL250          I/O DATA AREA
AREAHEAD DS    0CL6            HEADER
AREACODE DC    XL1'40'         KEY PRESSED CODE
         DC    XL2'4040'       CURSOR POSITION
         DC    XL3'404040'     COMMAND
AREADATA DC    CL244' '        DATA FIELD
AREA2    DC    CL250' '        I/O DATA AREA (SAME AREA)
AREA3    DC    CL250' '        I/O DATA AREA (SAME AREA)
AREA4    DC    CL250' '        I/O DATA AREA (SAME AREA)
         ENTRY AREA1END
AREA1END EQU   *
         DC    X'00'           DELIMITER
AREA1LEN EQU   AREA1END-AREA1  AREA1 LENGTH
         LTORG
*
**************************************************************
*
*      LOGON EXIT-ROUTINE CONSTANTS
*
**************************************************************
INILOGO  DC    V(SCREENL)   COMMON OUTPUT STRING AREA ADDRESS
INIPLST  DC    V(PARMLIST)  COMMON OUTPUT STRING AREA ADDRESS
INIPARM  DC    CL1'C'       PARAMETER FOR CLEAR SCREEN AND PRINT
         DC    AL1(0,0,0,0) CLEAR COORDINATES
         DC    AL4(SIGNPAN) PANEL INSTRUCTIONS ADDRESS
**************************************************************
SAVE1    DS    F            SAVEAREA FOR REG14 RETURN ADDRESS
SAVE2    DS    18F          SAVEAREA FOR MACROS IN VTAM EXITS
R1CONTS2 DS    F'0'         SAVEAREA FOR REG1 FOR DUMP
SAVESENS DC    F'0'         SENSE FROM FAILED OPNDST
MSGAREA  DC    CL80' '      AREA FOR LOGON MESSAGE
PANIND1  EQU   *            EXT REF BUG
         DC    CL3' '       PANEL STRING INDICATOR
*
SIGNPAN  DC    AL1(05,12+12),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDDDDDDDDDD     BBBBBBBBBBB      GGGGGGGGGG '
         DC    AL1(06,12+11),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDDDDDDDDDDD    BBBBBBBBBBBB    GGGGGGGGGGGG'
         DC    AL1(07,12+10),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG      GGG'
         DC    AL1(08,12+09),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG      GGG'
         DC    AL1(09,12+08),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG         '
         DC    AL1(10,12+07),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBBBBBBBBBB     GGG  GGGGGGG'
         DC    AL1(11,12+06),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBBBBBBBBBB     GGG  GGGGGGG'
         DC    AL1(12,12+05),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG      GGG'
         DC    AL1(13,12+04),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG      GGG'
         DC    AL1(14,12+03),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDD      DDD    BBB      BBB    GGG      GGG'
         DC    AL1(15,12+02),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDDDDDDDDDDD    BBBBBBBBBBBB    GGGGGGGGGGGG'
         DC    AL1(16,12+01),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'DDDDDDDDDDD     BBBBBBBBBBB      GGGGGGGGGG '
         DC    AL1(18,12+01),X'60',AL1(44) ROW/COL/ATT/LEN
         DC    CL44'   COPYRIGHT (C) 1995 BY BERNABE LLOVERA.   '
         DC    AL1(20,26),X'E8',AL1(20) ROW/COL/ATT/LEN
         DC    CL20'ENTER YOUR PASSWORD:'
*        DC    AL1(20,48),X'5C',AL1(01) ROW/COL/ATT/LEN
         DC    AL1(20,47),X'48',AL1(01) ROW/COL/ATT/LEN
         DC    X'13'                SET CURSOR TO LAST FIELD
         DC    AL1(20,54),X'60',AL1(00) ROW/COL/ATT/LEN
         DC    X'00'         END OF PANEL
***********************************************************************
* EXTERNAL REFERENCES ADDRESS TABLE
* NECESARY FOR FORWARD REFERENCING ONLY LINKAGE EDITORS
ADDRTAB  EQU   *
*  DC    V(APPLCURS)        1 - APPLICATION PARAMETERS ADDR
*  DC    V(AREA1)           2 - INPUT BUFFER START
*  DC    V(AREA1END)        3 - INPUT BUFFER END ADDR
*  DC    V(BINOD)           4 - BINARY TREE PROGRAM ADDRESS
*  DC    V(BOXPARML)        5 - BOX PARAMETER LIST ADDRESS
*  DC    V(HELP)            6 - HELP PROCEDURE ADDRESS
*  DC    V(INSCRN)          7 - COMMON WORK SCREEN ADDR
*  DC    V(INSCRNL)         8 - COMMON WORK SCREEN LIMIT ADDR
*  DC    V(MENUTAB)         9 - MENU TABLE ADDR
*  DC    V(PANEL)          10 - PANEL COBOL PROGRAM ADDRESS
*  DC    V(PANLENG)        11 - COMMON OUTPUT AREA LENGTH
*  DC    V(PARMLIST)       12 - OUTPUT STRING AREA ADDRESS LIST
*  DC    V(PRINTS)         13 - PRINT DCB ADDRESS
*  DC    V(SCREEN)         14 - SCREEN START ADDR
*  DC    V(SCREENE)        15 - SCREEN DELIMITER ADDRES
*  DC    V(SCREENL)        16 - SCREEN LENGTH ADDR - SPACE USED
*  DC    V(SCRSYSNM)       17 - SYSTEM DESCR ADDR IN OUTSTR
*  DC    V(SUBSNAM)        18 - WINDOWS SUB-SYSTEM NAME
*  DC    V(SWDISCO)        19 - COMMON AREA DISCONNECT SWITCH
*  DC    V(SYSTEMCD)       20 - WINDOWS SYSTEM NAME
*  DC    V(TREELEV)        21 - WINDOWS TREE LEVEL FLD ADDR
*  DC    V(TREETAB)        22 - TREE TABLE ADDRESS POINTER
*  DC    V(USERFLDL)       23 - BUFFPRO TABLE LENGTH
*  DC    V(USERFLDT)       24 - BUFFPRO FIELD TABLE ADDR
   DC    V(DBG)            25 - <<< THIS TABLE REFERENCE >>>
*
         LTORG
*******************************************************
*                   REFERENCES                        *
*******************************************************
*        MODULE - SEND                                *
*                 PRINT ON THE SCREEN                 *
*        SYSTEM - PC/370 CROSS ASSEMBLER              *
*        AUTHOR - BERNABE LLOVERA                     *
*        DATE   - SEPTEMBER 1995                      *
*******************************************************
*                                                     *
*     PROGRAM ENTRY POINT: SEND                       *
*     OTHER ENTRIES:                                  *
*                                                     *
*     EXTERNAL REFERENCES:                            *
*        SCREENL  = LENGTH OF DATA SENT TO SCREEN     *
*        SCREEN   = SCREEN DATA BUFFER                *
*        SCREEND  = SCREEN DATA BUFFER LIMIT ADDR     *
*                                                     *
*******************************************************
*        PRINT NOGEN
         TITLE '                                * * *   SEND  * * *'
********************************************************************
*   128 - 191 ISSUE BIOS INTERRUPT NUMBER = SVC # - X'80' WITH PC
*   REGISTERS MAPPED AS FOLLOWS BEFORE AND AFTER INTERRUPT:
*      AX - LOW BYTES OF REGISTER 0
*      BX - LOW BYTES OF REGISTER 1
*      CX - LOW BYTES OF REGISTER 14
*      DX - LOW BYTES OF REGISTER 15
*   IF CARRY SET BY CALL, THEN CC =3 ELSE CC = 0.
*   8086 FLAGS RETURNED IN HIGH BYTES OF R0.
********************************************************************
*   200 - 241 ISSUE INTERRUPT 21H WITH PC REGISTERS MAPPED AS FOLLOWS:
*   FOR ALL SVC'S 200-241:
*      AH - MS-DOS FUNCTION CALL NUMBER = SVC NUMBER -200
*      AL - LOW BYTE OF REGISTER 0
*      BX - LOW BYTES OF REGISTER 1
*   FOR SVC # 201-208, 211, 213, 214, AND 225:
*      DL - LOW BYTE REGISTER 2
*   FOR SVC 209, 210, 212, AND 215-241:
*   ?? DS:DS - SEGMENT:OFFSET FROM VIRTUAL ADDRESS IN REGISTER 2
*      CX    - RETURNED IN REGISTER 14
*      DX    - RETURNED IN REGISTER 15
********************************************************************
*SEND     CSECT
SEND     DS    0H
XX8      STM   R14,R12,12(R13) SAVE IN CALLERS SAVE AREA
         LR    R12,R15         USE ENTRY ADDRESS
         USING XX8,R12
         LA    R15,XX8SAV1     GET PROGRAMS SAVE AREA ADDR
         ST    R13,4(R15)      SAVE CALLERS SAVE AREA ADDR
         ST    R15,8(R13)      SAVE PROGRAMS SAVE AREA IN CALLERS AREA
         LR    R13,R15         GET PROGRAMS SAVE AREA ADDR
         B     AROXX8          SKIP SAVE AREA FLD
XX8SAV1  DS    18F             RETURN SAVE REGS AREA
         DC    CL12'<<SEND>>'  DUMP PROGRAM ID
AROXX8   DS    0H
         L     R1,0(R1)               GET PARAM LIST ADDRESS
         ST    R1,PARMLST             SAVE PARAMETER ADDR
*
*        LA    R2,SAVCUR               DX = ROW,COL FOR CURSUR SET
*        BAL   R14,CURSAV              SAVE CURSOR POSITION
*
         L     R2,SCRL                 LENGTH ADDRESS
         L     R2,0(0,R2)              DATA LENGTH
         L     R3,SCR                  DATA ADDR
         LA    R2,0(R2,R3)             DATA LENGTH PLUS ADDR
*        L     R2,SCREENL              LENGTH DATA
*        LA    R2,SCREEN(R2)           DATA ADDR
         ST    R2,LENSCR               DELIMITER ADDR OF DATA
         MVC   0(80,R2),=XL80'00'      CLEAR SCREEN DELIMITER AREA
*
*        LA    R3,SCREEN               DATA ADDRESS
         L     R3,SCR                  ACTUAL DATA ADDRESS
*
         LA    R1,VARFLDTB             VARIABLE FIELD TABLE FOR INPUT
         ST    R1,LASTFLDP             INITIAL TABLE POINTER
*
         BAL   R14,CLEARFTB            CLEAR FIELD TABLE
*
         CLI   0(R3),X'00'             NULL BYTE?
         BNE   CHKCLS                  NO, CHECK FOR CLS
         LA    R3,1(0,R3)              BYPASS NULL
         B     CHECKLIM                GO CHECK LENGTH LIMIT
*
CHKCLS   DS    0H
         CLC   0(2,R3),=C'1C'          COMMAND CLEAR SCREEN?
         BNE   CHKCOOR                 NO, CHECK FOR SCREEN COORD
         MVI   ATTRIB,X'07'            SET NORMAL ATTRIBUTE
         BAL   R14,CLRSCN              CLEAR THE SCREEN
         LA    R3,2(0,R3)              BUMP INPUT POINTER
*
CHKCOOR  DS    0H
         CLI   0(R3),X'11'             COMMAND FOR ROW/COL?
         BNE   CHKDUP                  NO, CHECK FOR DUP COMMAND
         MVC   ROWCOL,1(R3)            LOAD VALUE FOR ROW/COL
         LH    R2,ROWCOL               LOAD VALUE FOR ROW/COL
         BAL   R14,CURSET              SET CURSOR POSITION
         LA    R3,3(0,R3)              BUMP INPUT POINTER
*
CHKDUP   DS    0H
         CLI   0(R3),X'3C'             DUPLICATE COMMAND?
         BNE   CHKATT                  NO, CHECK FOR ATTRIBUTES
         MVC   COL,ROWCOL+1            EXTRACT COLUMN
         MVC   ROW,ROWCOL              EXTRACT ROW
         LA    R1,COL                  COL/ROW ADDR
         BAL   R14,BUFF327B            CONVERT TO OFFSET
         ST    R15,SAVESTA             SAVE STARTING POSITION
         MVC   COL,2(R3)               EXTRACT COLUMN
         MVC   ROW,1(R3)               EXTRACT ROW
         LA    R1,COL                  COL/ROW ADDR
         BAL   R14,BUFF327B            CONVERT TO OFFSET
         S     R15,SAVESTA             GET DIFERENCE
         MVC   TORC,1(R3)              SAVE TO ROW/COL FOR DUP
         LH    R5,TORC                 ON R5 FOR DUP PARM
         LA    R3,3(0,R3)              GET CHAR ADDR
         LR    R2,R15                  DUPLICATION LENGTH
         BAL   R14,DUPCHR              PRINT DUP CHARS
         LA    R3,1(0,R3)              BUMP INPUT POINTER
         B     GOSEND                  SEND REST OF DATA
*
CHKATT   DS    0H
         CLI   0(R3),X'1D'             COMMAND FOR ATTRIBUTE?
         BNE   GOSEND                  NO, SEND NEXT DATA
         BAL   R14,STOREFLD            GO STORE FIELD DATA
*
GOSEND   DS    0H
         BAL   R14,SENDCHR             SEND DATA TO SCREEN
*
CHECKLIM DS    0H
         C     R3,LENSCR               CHECK DATA LIMIT
         BNH   SENDLOOP                LOOP SOME MORE
*
         LA    R1,FIELDTAB
LASTSET  DS    0H
         CLC   0(2,R1),=X'FFFF'        END OF TABLE?
         BE    EXITPROG                YES, EXIT
         CLC   2(2,R1),FIELDCUR+2      OUR LOCATION?
         BE    EXITPROG                YES, EXIT
         LA    R1,12(0,R1)              BUMP
         B     LASTSET                 LOOP
*
EXITPROG DS    0H
         ST    R1,FIELDLOC             INITIAL TABLE POINTER
*        L     R2,SAVCUR               LOAD VALUE OF ROW/COL
*        BAL   R14,CURSET              SET CURSOR POSITION
*
******** CALL  RECEIVE,FIELDCUR
*        L     1,=A(FIELDCUR)
*        L     15,=A(RECEIVE)
*        BALR  14,15
*
         LA    R15,1                   ASSUME IT PRINTED
         CLI   PRINTED,C'1'            PRINTED ANYTHING?
         BE    PRINTOK                 YES, SKIP TURN OFF
         XR    R15,R15                 NO PRINT RETURN CODE
PRINTOK  DS    0H
         MVI   PRINTED,C' '            RESET PRINT SWITCH
         ST    R15,RETCODE
         EXIT  SAVE=YES,RC=RETCODE
*
********************************************************************
*      STORE FIELD ATTRIBUTE AND LOCATION IN TABLE                 *
*      ON ENTRY:                                                   *
*      ON EXIT:                                                    *
********************************************************************
STOREFLD DS    0H
         ST    R14,STOSV               PUSH EM REGS
*
         LA    R4,FIELDTAB             START TABLE ADDRESS
STORELP  DS    0H
         CLC   0(2,R4),=X'FFFF'        END OF TABLE?
         BE    SETINTEN                YES, NO MORE THIS TIME
         CLC   4(2,R4),=X'0000'        IS THIS PLACE EMPTY?
         BE    SETHERE                 YES, SET FIELD
         CLC   2(2,R4),LASTRC          ALREADY IN TABLE?
         BE    SETHERE                 YES, SET FIELD
         LA    R4,12(0,R4)             BUMP
         ST    R4,FIELDLOC             SAVE TABLE POINTER
         B     STORELP                 LOOP
*
SETHERE  DS    0H
         TM    1(R3),X'20'             PROTECTED FIELD?
         BO    PROTECT                 YES, DO PROTECTED
         MVC   1(1,R4),1(R3)           SAVE ATTR IN TABLE
         MVC   2(2,R4),LASTRC          SAVE ROW/COL (FROM)
         B     SETINTEN                GO SET INTENSITY
PROTECT  DS    0H
         CLC   2(2,R4),=X'0000'        DO WE HAVE THE START?
         BE    SETINTEN                NO, JUST SET INTENSITY
         BAL   R14,GETFLENG            GO GET FIELD LENGTH
SETINTEN DS    0H
         TM    1(R3),X'08'             HIGHLIGHTED?
         BZ    SETNORM                 NO, SET NORMAL
         MVI   ATTRIB,X'0F'            SET HIGHLIGHT ATTRIBUTE
         B     BUMPINP                 GO BUMP INPUT POINTER
SETNORM  DS    0H
         MVI   ATTRIB,X'07'            SET NORMAL ATTRIBUTE
BUMPINP  DS    0H
         MVI   SWATTR,C'1'             TURN ATTRIB SWITCH ON
         LA    R3,1(0,R3)              BUMP INPUT POINTER
*
         L     R14,STOSV               POP EM REGS
         BR    R14
*
STOSV    DS    F                       PUSH EM REGS
STORR    DS    4F
********************************************************************
*      GET 3270 DATA FIELD LENGTH                                  *
*      ON ENTRY:  R4 = FIELD TABLE ENTRY ADDRESSS                  *
*      ON EXIT:   FIELD LENGTH UPDATED ON TABLE                    *
********************************************************************
GETFLENG DS    0H
         ST    R14,GFLSV               PUSH EM REGS
         STM   R1,R4,GFLRR
*
         MVC   COL,3(R4)               EXTRACT COLUMN
         MVC   ROW,2(R4)               EXTRACT ROW
         LA    R1,COL                  COL/ROW ADDR
         BAL   R14,BUFF327B            CONVERT TO OFFSET
         ST    R15,SAVESTA             SAVE STARTING POSITION
         LA    R2,SAVCUR2              ROW,COL FOR CURSUR SET
         BAL   R14,CURSAV              SAVE CURSOR POSITION
         MVC   COL,SAVCUR2+3           EXTRACT COLUMN
         MVC   ROW,SAVCUR2+2           EXTRACT ROW
         LA    R1,COL                  COL/ROW ADDR
         BAL   R14,BUFF327B            CONVERT TO OFFSET
         S     R15,SAVESTA             GET DIFERENCE
         BCTR  R15,0                   DECREMENT 1
         STH   R15,4(R4)               STORE DIFERENCE IN TABLE
         MVC   6(2,R4),SAVCUR2+2       STORE ROW/COL (TO)
         L     R1,LASTFLDP             GET NEXT FIELD TAB POSITION
         MVC   8(4,R4),LASTFLDP        SAVE THIS FIELD TAB POSITION
         LA    R1,0(R15,R1)            INCREMENT BY NEW FLD LEN
         ST    R1,LASTFLDP             SAVE BACK
*
         LM    R1,R4,GFLRR
         L     R14,GFLSV               POP EM REGS
         BR    R14
*
GFLSV    DS    F                       PUSH EM REGS
GFLRR    DS    4F
*
********************************************************************
*      CLEAR FIELD TABLE                                           *
*      ON ENTRY:                                                   *
*      ON EXIT:                                                    *
********************************************************************
CLEARFTB DS    0H
         ST    R14,CLEART              PUSH EM REGS
         ST    R1,CLEARR
*
         LA    R1,FIELDTAB             FIX FIELD TABLE FOR INPUT
         ST    R1,FIELDLOC             INITIAL TABLE POINTER
CLEARLP  DS    0H
         CLC   0(2,R1),=X'FFFF'        END OF TABLE?
         BE    SENDLOOP                YES, EXIT
         XC    0(12,R1),0(R1)          ERASE TO ZEROES
         LA    R1,12(0,R1)             BUMP
         B     CLEARLP                 LOOP
*
SENDLOOP DS    0H
         L     R1,CLEARR
         L     R14,CLEART              PUSH EM REGS
         BR    R14
*
CLEART   DS    F                       PUSH EM REGS
CLEARR   DS    F
********************************************************************
*      DUPLICATE CHARACTER ON THE SCREEN                           *
*      ON ENTRY:  R3 = ADDR OF CHARACTER TO PRINT                  *
*                 R2 = LENGTH                                      *
*                 R5 = INITIAL ROW/COL                             *
********************************************************************
DUPCHR   DS    0H
         ST    R14,RTDUP               PUSH EM REGS
         STM   R1,R4,RRDUP
*        LA    R3,CHAR                 DUP CHAR ADDR
*        LA    R2,8                    DUP LENGTH
*
*DUPCHRL DS    0H
         LA    R0,X'0900'              WRITE CHAR AND ATTR
         SR    R4,R4                   ERASE
         IC    R4,0(R3)                CHAR TO DISPLAY
         IC    R0,ASCII(R4)            TRANSLATE TO ASCII
         LA    R1,0                    PAGE 0
         IC    R1,ATTRIB               SEND ATTR
         LR    R14,R2                  DUP FACTOR = R2
         SVC   VIDEO                   SEND CHARACTER
         LA    R0,X'0200'              SET CURSOR
         SH    R5,=H'256'              SUBTRACT 1 FROM ROW
         LR    R15,R5                  LOAD VALUE OF CURSOR ROW / COL
         LA    R1,0                    PAGE 0
         SVC   VIDEO                   RESTORE CURSOR
*
         LM    R1,R4,RRDUP            POP EM REGS
         L     R14,RTDUP
         BR    R14
*
RTDUP    DS    F                       POP EM REGS
RRDUP    DS    4F
*
********************************************************************
*      SEND CHARACTER TO SCREEN                                    *
*      ON ENTRY:  R3 = DATA ADDRESS                                *
********************************************************************
SENDCHR  DS    0H
         ST    R14,RTSEND              PUSH EM REGS
         ST    R2,RRSEND               PUSH EM REGS
*        LA    R3,DATA                 DATA ADDR
*
SENDCHRL DS    0H
         CLI   0(R3),X'00'             NULL BYTE?
         BE    SENDCHRS                YES, SKIP IT
         CLI   0(R3),X'13'             JUMP TO LAST FIELD?
         BNE   NOCURPOS                NO, GO ON
         MVC   FIELDCUR+2(2),ROWCOL    SET TO LAST LOCATION
         B     SENDCHRS                SKIP IT
NOCURPOS DS    0H
         CLI   0(R3),X'11'             NEW SCREEN COORDS?
         BE    SENDCHRE                YES, EXIT TO GET COORDS
         CLI   0(R3),X'1D'             ATTRIBUTE?
         BE    SENDCHRE                YES, EXIT TO PROCESSES
         CLI   0(R3),X'3C'             DUP COMMAND?
         BE    SENDCHRE                YES, EXIT TO GET COORDS
         CLC   0(2,R3),=C'1C'          CLEAR SCREEN COMMAND?
         BE    SENDCHRE                YES, EXIT TO DO IT
         MVI   PRINTED,C'1'            PRINTED SWITCH ON
         LA    R0,X'0900'              WRITE CHAR AND ATTR
         LA    R1,0                    PAGE 0
         IC    R1,ATTRIB               SEND ATTR
         LA    R14,1                   DUP FACTOR = 1
         SVC   VIDEO                   SEND CHARACTER
         LA    R0,X'0E00'              WRITE CHAR AND ATTR
         CLI   SWATTR,C'1'             ATTRIB SWITCH ON?
         BNE   NOREPLA                 NO, DON'T REPLACE W/BLANK
         IC    R0,=C" "                USE AN ASCII BLANK
         B     REPLACED                PRINT BLANK
NOREPLA  DS    0H
         SR    R2,R2                   ERASE
         IC    R2,0(R3)                CHAR TO DISPLAY
         IC    R0,ASCII(R2)            TRANSLATE TO ASCII
REPLACED DS    0H
         LA    R1,0                    PAGE 0
         SVC   VIDEO                   SEND CHARACTER
         MVI   SWATTR,C' '             TURN ATTRIB SWITCH OFF
SENDCHRS DS    0H
         LA    R3,1(R3)                BUMP
         C     R3,LENSCR               CHECK DATA LIMIT
         BNH   SENDCHRL                DO WHILE R3 <= LENSCR
*
SENDCHRE DS    0H
         L     R2,RRSEND
         L     R14,RTSEND
         BR    R14
*
RTSEND   DS    F                       POP EM REGS
RRSEND   DS    F                       POP EM REGS
*
********************************************************************
*      SAVE CURSOR POSITION                                        *
*      ON ENTRY:  R2 = LOCATION TO SAVE ROW/COL                    *
********************************************************************
CURSAV   DS    0H
         ST    R14,RTSAV               PUSH EM REGS
         STM   R1,R2,RRSAV
*        LA    R2,SAVCUR               ROW/COL SAVE AREA
*
         LA    R0,X'0300'              GET CURSOR POSITION
         LA    R1,0                    BX=0 PAGE 0
         SVC   VIDEO                   GET CURSOR ROW,COL IN R15
         ST    R15,0(0,R2)             SAVE IT
*
         LM    R1,R2,RRSAV             POP EM REGS
         L     R14,RTSAV
         BR    R14
*
RTSAV    DS    F                       POP EM REGS
RRSAV    DS    2F
********************************************************************
*      SET CURSOR POSITION                                         *
*      ON ENTRY:  R2 = LOCATION OF ROW/COL                         *
********************************************************************
CURSET   DS    0H
         ST    R14,RTSET               PUSH EM REGS
         STM   R1,R2,RRSET
*        LA    R2,SAVCUR               ROW/COL SAVE AREA
*
         LA    R0,X'0200'              SET CURSOR
         SH    R2,=H'256'              SUBTRACT 1 FROM ROW
         LR    R15,R2                  LOAD VALUE OF CURSOR ROW / COL
         LA    R1,0                    PAGE 0
         SVC   VIDEO                   SET CURSOR
         STH   R2,LASTRC               SAVE LAST ROW/COL
*
         LM    R1,R2,RRSET             POP EM REGS
         L     R14,RTSET
         BR    R14
*
RTSET    DS    F                       POP EM REGS
RRSET    DS    2F
********************************************************************
*      CLEAR SCREEN                                                *
*      ON ENTRY:                                                   *
********************************************************************
*   R.H.AH = 6;             // FUNCTION
*   R.H.AL = 0;             // CLEAR SCREEN
*   R.H.CH = 0;             // START ROW
*   R.H.CL = 0;             // START COLUMN
*   R.H.DH = 24;            // END ROW
*   R.H.DL = 79;            // END COLUMN
*   R.H.BH = 7;             // ATTRIBUTE
********************************************************************
CLRSCN   DS    0H
         ST    R14,RTCLR               PUSH EM REGS
*
         LA    R0,X'0600'              SCROLL
         LA    R14,X'0000'             START ROW/COL (0,0)
         LH    R15,=H'6223'            END ROW/COL X'184F' (34,79)
*        LH    R1,ATTRIB               ATTRIBUTE (NORMAL)
         LH    R1,=H'1792'             ATTRIBUTE X'0700' NORMAL
         SVC   VIDEO                   RESTORE CURSOR
*
         L     R14,RTCLR
         BR    R14
*
RTCLR    DS    F                       POP EM REGS
***********************************************************************
*** OBTIENE LA DIRECCION DE BUFFER DADOS FILA, COLUMNA Y            ***
*** CANTIDAD DE COLUMNAS POR FILA.                                  ***
***   ENTRADA: R1 -> DIRECCION DE 2 BYTES CONTIGUOS ALINEADOS       ***
***                  |C|F|CF|  F:FILA; C:COLUMNA; CF:COLS/FILA      ***
***   SALIDA : R15-> DIRECCION DE BUFFER                            ***
***   INVOCACION:   BAL R14,BUFF327B                                ***
***********************************************************************
BUFF327B DS    0H
         SR    2,2               CLEAR WORK REG
         IC    2,0(1)            GET COLUMN
         BCTR  2,0               MINUS 1 FOR ADD
         SR    15,15             CLEAR WORK REG
         IC    15,1(1)           GET ROW
         BCTR  15,0              MINUS 1 FOR MULT
         MH    15,2(1)           TIMES NO OF COLS/ROW
         AR    15,2              RESULT IN R15
         BR    14                GOBACK
*
********************************************************************
*
* PC/370 SUPR STATE SVC'S
*
VIDEO    EQU   128+16      ROM BIOS VIDEO (INT 10H)
         DS    0D
COL      DC    X'00'       TEMP COL/ROW
ROW      DC    X'00'
LENSCR   DC    A(0)        DELIMITER ADDR OF DATA
SAVESTA  DC    A(0)        SAVE START ROW/COL FOR DUP
DUPLEN   DC    F'0'        SAVE DUPLICATION LENGTH
RETCODE  DC    F'0'        EXIT RETURN CODE
SAVCUR   DC    F'5376'     INITIAL R/C X'1500' 21/00
SAVCUR2  DC    F'0'        TEMP SAVE CUR
PARMLST  DC    F'0'
ATTRIB   DS    0H
         DC    X'07'       SCREEN ATTRIBUTE
         DC    X'00'       SECOND BYTE ATTRIBUTE
PRINTED  DC    C' '        PRINTED SOMETHING SWITCH
ROWCOL   DC    H'0'        ROW COL TEMP STORAGE
TORC     DC    H'0'        ROW/COL FOR DUP PARM
LASTRC   DC    H'0'        LAST ROW/COL ACCESSED
*
BUMPRC   DS    0H          WORK FIELD FOR BUMPING COL
BUR      DS    X'00'       WORK FIELD FOR BUMPING COL
BUC      DS    X'00'       WORK FIELD FOR BUMPING COL
*
SWATTR   DC    C' '        ATTRIB SWITCH
********************************************************************
SCRL     DC    V(SCREENL)   SCREEN DATA LENGTH
SCR      DC    V(SCREEN)    SCREEN DATA ADDR
SCRE     DC    V(SCREENE)   SCREEN DELIMITER LOCATION
********************************************************************
ASCII    DS    0CL256            EBCDIC TO ASCII CONVERTION
*                .0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F
         DC    X'20202020202020202020202020202020' 0.
         DC    X'20202020202020202020202020202020' 1.
         DC    X'20202020202020202020202020202020' 2.
         DC    X'20202020202020202020202020202020' 3.
         DC    X'20202020202020202020202E3C282B7C' 4.
         DC    X'2620202020202020202021242A293B5E' 5.
         DC    X'2D2F2020202020202020202C255F3E3F' 6.
         DC    X'202020202020202020603A2340273D22' 7.
         DC    X'20616263646566676869207B20202020' 8.
         DC    X'206A6B6C6D6E6F707172207D20202020' 9.
         DC    X'207E737475767778797A2020205B2020' A.
         DC    X'202020202020202020202020205D2020' B.
         DC    X'20414243444546474849202020202020' C.
         DC    X'204A4B4C4D4E4F505152202020202020' D.
         DC    X'5C20535455565758595A202020202020' E.
         DC    X'30313233343536373839202020202020' F.
*
****************************************************************
*  3270 ATTRIBUTE CHARACTER TABLE
****************************************************************
*        +--UNPROT  ALPH/NUM
*        |  +--UNPROT  NUMERIC
*        |  |  +--PROTEC  ALPH/NUM
*        |  |  |  +--PROTEC  AUTOSKIP
*        |  |  |  |
*        40 50 60 F0                              MDT-OFF
*        C1 D1 61 F1                              MDT-ON
*        C4 D4 E4 F4            PEN-DET           MDT-OFF
*        C5 D5 E5 F5            PEN-DET           MDT-ON
*        C8 D8 E8 F8  HI-INTNS  PEN-DET           MDT-OFF
*        C9 D9 E9 F9  HI-INTNS  PEN-DET           MDT-ON
*        4C 5C 6C 7C  --------  -------  NON-DSP  MDT-OFF
*        4D 5D 6D 7D  --------  -------  NON-DSP  MDT-ON
*                        A A A
*                          P N    H     M
*                      1 1 1 1    1 1 1 1
*                        N        N N
****************************************************************
FIELDCUR DC    F'0'            INITIAL CURSOR POSITION
FIELDLOC DC    A(FIELDTAB)     INITIAL TABLE POINTER
FIELDTAB EQU   *
*                ATTR   R/C-F    LEN    R/C-T   DATA-ADDR
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
*
*        DC    10XL2'0000',10XL2'0000',10XL2'0000'  ATTR | R/C | LENG
*        DC    10XL2'0000',10XL2'0000',10XL2'0000'  ATTR | R/C | LENG
*        DC    10XL2'0000',10XL2'0000',10XL2'0000'  ATTR | R/C | LENG
         DC    X'FFFF',X'0000'         TABLE DELIMITER
LASTFLDP DC    A(VARFLDTB)    VARIABLE FIELD TABLE POINTER
VARFLDTB DC    CL250' '       VARIABLE FIELD TABLE FOR INPUT DATA
         DC    CL250' '
VARFLDTE EQU   *              DELIMITER ADDRESS
********TEST DATA***********************************************
*        DS    0D
*SCREENL  DC    F'353'
*SCREEN   EQU   *
* DC X'F1C3'
* DC X'110101',X'3C174F40'
* DC X'110200',X'1DE8',C'DBG ',X'1D60'
* DC C'- MONITOR DE PRIORIDAD DE LLAMADAS',CL12' '
* DC X'11022C',X'1D60',C'PF1=HELP PF3=EXIT '
* DC X'11023E',X'1DE8',C'10/07/95 13:58:17',X'1D60'
* DC X'110400',X'1DE8',X'3C045060',X'1D60'
* DC X'110300',X'1DE4',C'DISPLAYS'
* DC X'11030B',X'1DE8',C'INFORMES'
* DC X'110316',X'1DE4',C'CATALOGO'
* DC X'110321',X'1DE4',C'PROCESOS'
* DC X'11040C',X'60',X'3C043760',X'60'
* DC X'11070C',X'60',X'3C073760',X'60'
* DC X'11050C',X'4F',X'3C053740',X'4F'
* DC X'11060C',X'4F',X'3C063740',X'4F'
* DC X'11050D',X'1DE8',C'LISTADO DE ARCHIVOS   * SUB-MENU *:',X'1D60'
* DC X'11060D',X'1DE4',C'ESTADISTICA DE LLAMADAS PRIORITARIAS:',X'1D60'
* DC X'110533',X'1D40',C'_',X'1D60'      HIGHLIGHT
* DC X'110633',X'1D48',C'_',X'1D60'      NORMAL
* DC X'110533',X'1D40',X'13'
* DC X'111221',X'1DE4',C'DATA ENTRY:',X'1D60'
* DC X'11122D',X'1D48',C'        ',X'1D60'     DARK
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
* DC XL20'00'
*
*SCREENE  EQU   *
         LTORG
*******************************************************
*                   REFERENCES                        *
*******************************************************
*        MODULE - RECEIVE                             *
*                 PRINT ON THE SCREEN                 *
*        SYSTEM - PC/370 CROSS ASSEMBLER              *
*        AUTHOR - BERNABE LLOVERA                     *
*        DATE   - SEPTEMBER 1995                      *
*******************************************************
*                                                     *
*     PROGRAM ENTRY POINT: RECEIVE                    *
*     OTHER ENTRIES:                                  *
*                                                     *
*     EXTERNAL REFERENCES:                            *
*                                                     *
*******************************************************
*        PRINT NOGEN
         TITLE '                                * * *   SEND  * * *'
********************************************************************
*   128 - 191 ISSUE BIOS INTERRUPT NUMBER = SVC # - X'80' WITH PC
*   REGISTERS MAPPED AS FOLLOWS BEFORE AND AFTER INTERRUPT:
*      AX - LOW BYTES OF REGISTER 0
*      BX - LOW BYTES OF REGISTER 1
*      CX - LOW BYTES OF REGISTER 14
*      DX - LOW BYTES OF REGISTER 15
*   IF CARRY SET BY CALL, THEN CC =3 ELSE CC = 0.
*   8086 FLAGS RETURNED IN HIGH BYTES OF R0.
********************************************************************
*   200 - 241 ISSUE INTERRUPT 21H WITH PC REGISTERS MAPPED AS FOLLOWS:
*   FOR ALL SVC'S 200-241:
*      AH - MS-DOS FUNCTION CALL NUMBER = SVC NUMBER -200
*      AL - LOW BYTE OF REGISTER 0
*      BX - LOW BYTES OF REGISTER 1
*   FOR SVC # 201-208, 211, 213, 214, AND 225:
*      DL - LOW BYTE REGISTER 2
*   FOR SVC 209, 210, 212, AND 215-241:
*   ?? DS:DS - SEGMENT:OFFSET FROM VIRTUAL ADDRESS IN REGISTER 2
*      CX    - RETURNED IN REGISTER 14
*      DX    - RETURNED IN REGISTER 15
********************************************************************
RECEIVE  DS    0H
XXA      STM   R14,R12,12(R13) SAVE IN CALLERS SAVE AREA
         LR    R12,R15         USE ENTRY ADDRESS
         USING XXA,R12
         LA    R15,XXASAV1        GET PROGRAMS SAVE AREA ADDR
         ST    R13,4(R15)         SAVE CALLERS SAVE AREA ADDR
         ST    R15,8(R13)         SAVE PROGRAMS SAVE AREA IN CALLERS
         LR    R13,R15            GET PROGRAMS SAVE AREA ADDR
         B     AROXXA             SKIP SAVE AREA FLD
XXASAV1  DS    18F                RETURN SAVE REGS AREA
         DC    CL12'<<SEND>>'     DUMP PROGRAM ID
AROXXA   DS    0H
*
         LR    R10,R1             GET FIELD TABLE ADDRESS
         USING FIELDPAR,R10
*        LA    R2,SAVCUR1         ROW,COL FOR CURSUR SET
*        BAL   R14,CURSAV1        SAVE CURSOR POSITION
*        BAL   R14,CLRSCN1        CLS
*
********************************************************************
*      SET INITIAL CURSOR LOCATION                                 *
********************************************************************
         SR    R1,R1                   FOR IC
         IC    R1,FIELDCU1+3           COL
         LA    R1,1(0,R1)              BUMP
         STC   R1,FIELDCU1+3           SAVE
         IC    R1,FIELDCU1+2           ROW
         SH    R1,=H'1'                DEBUMP
         STC   R1,FIELDCU1+2           SAVE
         L     R2,FIELDCU1             ROW,COL FOR CURSUR SET
         BAL   R14,CURSET1             SET CURSOR POSITION
         MVC   SAVCUR1,FIELDCU1        SET CURSOR
         MVC   ROWS2,ROWS1             SAVE ROW/COL
         MVC   COLS2,COLS1
         MVI   COMMAND,X'00'           SET COMMAND ROW,COL
         MVC   COMMAND+1(2),SAVCUR1+2  SET COMMAND ROW,COL
         MVC   COMMAND+3(3),=XL3'00'   SET COMMAND ROW,COL
         MVI   INSERT,X'00'            RESET INSERT TOGGLE SWITCH
********************************************************************
         LA    R1,FIELDTA1        FIELD TABLE ADDR
         ST    R1,FIELDLO1        FIELD TABLE POINTER
*
         LH    R8,=H'5888'        X'1700' 23,00 FOR CURSUR SET
         LA    R6,=X'02'          ADDRESS OF _
         LA    R7,80              DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         LH    R8,=H'6144'        X'1800' 24,00 FOR CURSUR SET
         LA    R6,=X'40'          ADDRESS OF ' '
         LA    R7,80              DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         LH    R8,=H'6216'        X'1848' 24,72 FOR CURSUR SET
         LA    R6,=X'01'          SMILY CHAR
         LA    R7,1               DUP FACTOR
         BAL   R14,PRICHAR        PRINT
*
         SR    R3,R3              PREPARE FOR IC
         IC    R3,ROWS1           ROW
         STH   R3,ROWS
         SR    R4,R4              PREPARE FOR IC
         IC    R4,COLS1           COL
         STH   R4,COLS
*
READKEY  DS    0H
         BAL   R14,KBRWAIT        GET KEYSTROKE IN BUFFER
*
         CLI   KBLOCK,C' '        UNLOCK KEYBOARD?
         BE    SKUNLK             YES, SKIP UNLOCK
         CH    R2,KESC            ESC TO UNLOCK KEYB?
         BNE   READKEY            NO, READ ANOTHER KEY
         MVI   KBLOCK,C' '        UNLOCK KEYBOARD
         LH    R8,=H'6153'        X'1809' 24,09 FOR CURSUR SET
         LA    R6,=X'40'          SPACE
         LA    R7,1               DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         B     READKEY            READ ANOTHER KEY
*
SKUNLK   DS    0H
         CH    R2,KUP             IF ITS CURSOR UP?
         BNE   SETCUR1            NO, NEXT
         CH    R3,=H'1'           ROW AT TOP?
         BL    WRAPRUP            YES, WRAP ROW UP
         BCTR  R3,0               DECREMENT
         B     SETCURS            SET
WRAPRUP  DS    0H
         LH    R3,=H'22'          WRAP TO BOTTOM
         B     SETCURS            SET
*
SETCUR1  DS    0H
         CH    R2,KDN             IF ITS CURSOR DOWN?
         BNE   SETCUR2            NO, NEXT
         CH    R3,=H'22'          ROW AT BOTTOM?
         BNL   WRAPRDN            YES, WRAP ROW DOWN
         LA    R3,1(R3)           INCREMENT
         B     SETCURS            SET
WRAPRDN  DS    0H
         LA    R3,0               WRAP TO TOP
         B     SETCURS            SET
*
SETCUR2  DS    0H
         CH    R2,KBS             IF ITS BACK SPACE?
         BE    SAMEKLF            YES, SAME AS LEFT ARROW
         CH    R2,KLF             IF ITS CURSOR LEFT?
         BNE   SETCUR3            NO, NEXT
SAMEKLF  DS    0H
         CH    R4,=H'1'           COL AT FAR LEFT?
         BL    WRAPRLF            YES, WRAP COL TO RIGHT
         BCTR  R4,0               DECREMENT
         B     SETCURS            SET
WRAPRLF  DS    0H
         LA    R4,79              WRAP TO RIGHT
         B     SETCURS            SET
*
SETCUR3  DS    0H
         CH    R2,KRT             IF ITS CURSOR RIGHT?
         BNE   SETCUR4            NO, NEXT
         CH    R4,=H'79'          COL AT FAR RIGHT?
         BNL   WRAPRRT            YES, WRAP COL TO LEFT
         LA    R4,1(R4)           INCREMENT
         B     SETCURS            SET
WRAPRRT  DS    0H
         LA    R4,0               WRAP TO LEFT
         B     SETCURS            SET
*
SETCUR4  DS    0H
*        CH    R2,KESC            IF ITS CURSOR ESC?
*        BE    PROGEXIT           EXIT
*
         LA    R2,KEYS            GET SPECIAL KEY TABLE
KEYSEA   DS    0H
         CLC   0(2,R2),=XL2'0000' END?
         BNE   IFOUR              NO, GO TEST IF OUR KEY
         SR    R1,R1              FOR IC
         IC    R1,KEYREAD+1       GET KEY CODE
         B     KEYTEST            GO TEST KEY
IFOUR    DS    0H
         CLC   0(2,R2),KEYREAD    OUR KEY?
         BE    GOIT               YES, GET COMMAND
         LA    R2,3(0,R2)         BUMP POINTER
         B     KEYSEA             SEARCH SOME MORE
GOIT     DS    0H
         SR    R1,R1              FOR IC
         IC    R1,2(0,R2)         GET CONTROL CODE
KEYTEST  DS    0H
         LR    R0,R1              SAVE TO TEST IF COMMAND OR KEY
         IC    R1,EBCDIC(R1)      TRANSLATE TO EBCDIC
         C     R1,=F'0'           CONTROL COMMAND?
         BNE   DOCOMM             YES, SET COMMAND
LOCKIT   DS    0H
         MVI   KBLOCK,C'1'        LOCK KEYBOARD
         LH    R8,=H'6153'        X'1809' 24,09 FOR CURSUR SET
         LA    R6,=X'03'          LOCK SYMBOL (KEYBOARD LOCK)
         LA    R7,1               DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         B     READKEY            GET MORE
DOCOMM   DS    0H
         CH    R0,=H'32'          < X'20' = CONTROL COMMAND?
         BL    DOCOMM1            YES, CHECK COMMAND
         BAL   R14,PUSHKEY        INSERT CHARACTER IN BUFFER
         LTR   R15,R15            ANY ERRORS?
         BNZ   LOCKIT             YES, LOCK THE KEYBOARD
         B     FIXRC              SET ROW/COL POINTERS
DOCOMM1  DS    0H
         STC   R1,COMMAND         SET COMMAND *** EXIT PROGRAM ***
         CLI   COMMAND,X'11'      TAB?
         BNE   DOCOMME1           NO
         BAL   R14,TABFIELD       TAB
FIXRC    DS    0H
         LH    R3,ROWS            LOAD ROW/COL
         LH    R4,COLS
         B     READKEY            IGNORE REST
DOCOMME1 DS    0H
         CLI   COMMAND,X'12'      INSERT?
         BNE   DOCOMMEX           NO
***********************************************************
*         L     R1,=V(SCREEN)      FOR DUMP ****************
*         XDUMP 0(R1),500          FOR DUMP ****************
         L     R1,=V(USERFLDT)    FOR DUMP ****************
*         XDUMP 0(R1),100          FOR DUMP ****************
         L     R1,=V(AREA1)       FOR DUMP ****************
*         XDUMP 0(R1),100          FOR DUMP ****************
***********************************************************
         CLI   INSERT,X'00'       ALREADY INSERTING?
         BE    NOTINS             YES, SWITCH TO NOT
         MVI   INSERT,X'00'       TOGGLE SWITCH TO INSERT
         B     PRININS            PRINT
NOTINS   DS    0H
         MVI   INSERT,X'05'       TOGGLE SWITCH TO INSERT
PRININS  DS    0H
         LH    R8,=H'6196'        X'1834' 24,52 FOR CURSUR SET
         LA    R6,INSERT          CARRET SYMBOL OR BLANK (INSERT)
         LA    R7,1               DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         B     READKEY            IGNORE REST
DOCOMMEX DS    0H
         L     R2,COMMD           GET EXTERNAL COMMAND AREA
         MVC   0(3,R2),COMMAND    MOVE COMMANDS
         SR    R7,R7              FOR IC
         IC    R7,1(0,R2)         GET ROW BACK
         LA    R7,1(0,R7)         BUMP FOR COMPATIBILITY WITH 3270
         STC   R7,1(0,R2)         RESTORE BACK
         BAL   R14,SENDFLDS       SEND MODIFIED FIELDS TO AREA1
*        B     READKEY            IGNORE REST
*
PROGEXIT DS    0H
         LH    R8,=H'6174'        X'181E' 24,30 FOR CURSUR SET
         LA    R6,=X'04'          CHECK MARK (PROCESSING)
         LA    R7,1               DUP FACTOR
         BAL   R14,PRICHAR        PRINT
         EXIT  SAVE=YES,RC=RETCODE1
*
SETCURS  DS    0H
         STH   R3,ROWS            SAVE ROW/COL
         STH   R4,COLS
         MVC   ROWS1,ROWS2        SAVE ROW/COL
         MVC   COLS1,COLS2
         L     R2,SAVCUR1         ROW,COL FOR CURSUR SET
         BAL   R14,CURSET1        SAVE CURSOR POSITION
         MVC   COMMAND+1(2),SAVCUR1+2  SET COMMAND ROW,COL
         B     READKEY            LOOP
*
MOVEDATA MVC  6(*-*,R2),8(R1)     OUTPUT FROM VARIABLE FIELD TABLE
*
********************************************************************
*      PUSH CHARACTER IN BUFFER                                    *
*      ON ENTRY: R1 = CHARACTER TO SAVE                            *
*      ON EXIT:  R15 = 0 = OK         (AX=R0 BX=R1 CX=R14 DX=R15)  *
********************************************************************
PUSHKEY  DS    0H
         ST    R14,PUSSV               PUSH EM REGS
         STM   R1,R6,PUSRR             PUSH EM REGS
         L     R1,FIELDLO1        FIELD TABLE POINTER
         ST    R1,RCLOC           SAVE INITIAL TABLE POS
         B     PUSH1ST            SKIP 1ST COMPARIZON
*
PUSHLOOP DS    0H
         CLC   RCLOC,FIELDLO1     SAME AS INITIAL TABLE POS?
         BE    PUSHERR            YES, EXIT & SEND ERROR MSSG
PUSH1ST  DS    0H
         CLC   2(1,R1),ROWS1      SAME ROW?
         BNE   NEXTFIEL           NO, CHECK NEXT FIELD
         CLC   3(1,R1),COLS1      COLUMN FROM IN RANGE?
         BNL   NEXTFIEL           NO, CHECK NEXT FIELD
         CLC   7(1,R1),COLS1      COLUMN TO IN RANGE?
         BNH   NEXTFIEL           NO, CHECK NEXT FIELD
         L     R2,8(0,R1)         FIELD START BUFF ADDR
         SR    R3,R3              FOR IC
         IC    R3,3(0,R1)         FROM COLUMN
         LA    R6,1(0,R3)         LOAD AND BUMP FROM COLUMN
         STC   R6,RRRCCC+1        SAVE FROM COLUMN FOR FIELD R/C
         MVC   RRRCCC(1),2(R1)    SAVE FROM ROW FOR FIELD R/C
         SR    R4,R4              FOR IC
         IC    R4,COLS1           INPUT COLUMN
         LA    R5,1(0,R4)         BUMP INPUT COLUMN
         BCTR  R4,0               DECREMENT FOR RELATIVE TO 0
         SR    R4,R3              OFFSET INTO FIELD
         LA    R3,0(R4,R2)        DATA FIELD PLUS DISPLACEMENT
         MVC   0(1,R3),PUSRR+3    OR KEYREAD+1  STORE KEY
         MVI   0(R1),X'11'        MODIFIED DATA FIELD MARK
         MVI   COMMAND+3,X'11'    FOR ORDER PROCESSING
         MVC   COMMAND+4(2),RRRCCC  STORE FIELD ROW/COL IN COMM
*
*      PRINT CHARACTER
         MVI   ATTRIB1,X'07'      DEFAULT TO NORMAL ATTR
         TM    1(R1),X'4C'        DARK FIELD?
         BO    SKPRNT             YES, SKIP PRINT
         TM    1(R1),X'08'        HIGHLIGHTED?
         BZ    NORMALAT           NO, NORMAL ATTRIBUTE
         MVI   ATTRIB1,X'0F'      HIGHLIGHT
NORMALAT DS    0H
         LH    R8,ROWS1           CURSOR LOCATION TO PRINT
         LA    R6,PUSRR+3         OR KEYREAD+1 ADDRESS OF CHAR
         LA    R7,1               DUPLICATION FACTOR 1
         BAL   R14,PRICHAR        PRINT
SKPRNT   DS    0H
*
*      ADVANCE CURSOR
         STC   R5,COLS1           RESTORE BUMPED COLUMN
         L     R2,SAVCUR1         ROW,COL FOR CURSUR SET
         BAL   R14,CURSET1        SET CURSOR POSITION
         MVC   SAVCUR3,SAVCUR1    SET CURSOR
         MVC   ROWS2,ROWS1        SAVE ROW/COL
         MVC   COLS2,COLS1
         MVC   COMMAND+1(2),SAVCUR1+2  SET COMMAND ROW,COL
         SR    R15,R15            RESET ERROR RETURN CODE
         B     PUSHEX             EXIT
*
NEXTFIEL DS    0H
         CLC   0(2,R1),=X'FFFF'   END OF TABLE?
         BE    RESETAB            YES, RESET TABLE POINTER
         CLC   0(2,R1),=X'0000'   1ST EMPTY FIELD?
         BE    RESETAB            YES, RESET TABLE POINTER
         LA    R1,12(0,R1)        BUMP TABLE POINTER
         ST    R1,FIELDLO1        FIELD TABLE POINTER
         B     PUSHLOOP           LOOP
*
RESETAB  DS    0H
         LA    R1,FIELDTA1        FIELD TABLE ADDR
         ST    R1,FIELDLO1        FIELD TABLE POINTER
         B     PUSHLOOP           LOOP
*
PUSHERR  DS    0H
         LA    R15,1              SET ERROR RETURN CODE
*
PUSHEX   DS    0H
         LM    R1,R6,PUSRR        PUSH EM REGS
         LH    R3,ROWS            SAVE ROW/COL
         LH    R4,COLS
         L     R14,PUSSV          PUSH EM REGS
         BR    R14
*
PUSSV    DS    F
PUSRR    DS    6F
RRRCCC   DS    H                  FOR TEST OF FIELD ROW/COL
*
********************************************************************
*      TAB TO FIELD                                                *
*      ON ENTRY:                                                   *
*      ON EXIT:                       (AX=R0 BX=R1 CX=R14 DX=R15)  *
********************************************************************
TABFIELD DS    0H
         ST    R14,TABSV               PUSH EM REGS
         STM   R1,R5,TABRR             PUSH EM REGS
*
         MVC   TABINISV,FIELDLO1       SAVE INITIAL POSITION
         L     R4,FIELDLO1             INITIAL TABLE POINTER
         B     TABFIRST                START BUMPING
*
TABFLOOP DS    0H
         CLC   TABINISV,FIELDLO1       BACK TO INITIAL POSITION?
         BE    TABEXIT                 NO MORE
TABFIRST DS    0H
         LA    R4,12(0,R4)             BUMP TABLE POINTER
         ST    R4,FIELDLO1             INITIAL TABLE POINTER
         CLC   0(2,R4),=X'FFFF'        THE END?
         BE    WRAPCNT                 YES, POINT TO FIRST
         CLC   4(2,R4),=X'0000'        THE END?
         BNE   CHECKATT                NO, CHECK ATTRIBUTE
WRAPCNT  DS    0H
         LA    R4,FIELDTA1             TABLE ADDRESS
         ST    R4,FIELDLO1             INITIAL TABLE POINTER
CHECKATT DS    0H
         TM    1(R4),X'20'             CAN WE STOP HERE?
         BO    TABFLOOP                NO, SEE NEXT
         MVC   SAVCUR3+2(2),2(R4)      MOVE ROW/COL
         SR    R1,R1                   FOR IC
         IC    R1,COLS3                COL
         LA    R1,1(0,R1)              BUMP
         STC   R1,COLS3                SAVE
         L     R2,SAVCUR3              ROW,COL FOR CURSUR SET
         BAL   R14,CURSET1             SET CURSOR POSITION
         MVC   SAVCUR1,SAVCUR3         SET CURSOR
         MVC   ROWS2,ROWS1             SAVE ROW/COL
         MVC   COLS2,COLS1
         MVC   COMMAND+1(2),SAVCUR1+2  SET COMMAND ROW,COL
         MVI   COMMAND+3,X'00'         RESET ORDER PROCESSING
         MVC   COMMAND+4(2),=XL2'00'   RESET FIELD ROW/COL
*
TABEXIT  DS    0H
         LM    R1,R5,TABRR             POP EM REGS
         LH    R3,ROWS                 SAVE ROW/COL
         LH    R4,COLS
         L     R14,TABSV               POP EM REGS
         BR    R14
*
TABINISV DS    F
TABSV    DS    F
TABRR    DS    5F
*
********************************************************************
*      SEND MODIFIED DATA FIELDS TO APPLICATION                    *
*      ON ENTRY:                                                   *
*      ON EXIT:                       (AX=R0 BX=R1 CX=R14 DX=R15)  *
********************************************************************
SENDFLDS DS    0H
         ST    R14,SENSV               PUSH EM REGS
         STM   R1,R6,SENRR             PUSH EM REGS
*
*      ERASE AREA1 FIELD BUFFER
         L     R5,=V(AREA1+3)     VARIABLE FIELD TABLE FOR INP DATA
SENDERAL DS    0H
         C     R5,=V(AREA1END)    END OF BUFFER?
         BH    SENDGO             YES, GO SEND
         MVI   0(R5),X'40'        TO BLANKS
         LA    R5,1(0,R5)         BUMP
         B     SENDERAL           LOOP
*
*      SEND MODIFIED OR MDT FIELDS TO AREA1 DATA BUFFER
SENDGO   DS    0H
         L     R1,=V(FIELDTAB)    FIELD TABLE ADDR
         L     R5,=V(AREA1+3)     VARIABLE FIELD TABLE FOR INP DATA
*
SENDLP   DS    0H
         CLC   0(2,R1),=X'FFFF'   END OF TABLE?
         BE    SENDEX             YES, RESET TABLE POINTER
         CLC   0(2,R1),=X'0000'   1ST EMPTY FIELD?
         BE    SENDEX             YES, RESET TABLE POINTER
         CLI   0(R1),X'00'        MODIFIED DATA FIELD?
         BNE   FIELDMOD           YES, FIELD MODIFIED
         TM    1(R1),X'01'        MODIFIED DATA TAG ATTRIBUTE?
         BNZ   FIELDMOD           YES, FIELD MODIFIED
         LA    R1,12(0,R1)        BUMP INPUT TABLE POINTER
         B     SENDLP             LOOP WHEN NOT FOUND
*
FIELDMOD DS    0H
         MVI   0(R5),X'11'        MOVE VTAM ORDER CODE X'11'
         MVC   1(2,R5),2(R1)      MOVE FIELD ROW/COL
*
         SR    R6,R6              FOR IC
         IC    R6,1(0,R5)         GET ROW
         LA    R6,1(0,R6)         BUMP FOR 3270 COMPATIBILITY
         STC   R6,1(0,R5)         RESTORE ROW BACK
         IC    R6,2(0,R5)         GET COL
         LA    R6,2(0,R6)         BUMP FOR 3270 COMPATIBILITY
         STC   R6,2(0,R5)         RESTORE COL BACK
*
         L     R2,8(0,R1)         FIELD DATA START BUFF ADDR
         LH    R3,4(0,R1)         FIELD DATA LENGTH
         LA    R4,3(R3,R5)        BUMP OUTPUT POINTER FOR REACH
         C     R4,=V(AREA1END)    DOES IT FIT IN BUFFER?
         BH    SENDEX             NO, EXIT
         BCTR  R3,0               DECREMENT FOR EXECUTE
         EX    R3,SENDMOVE        MOVE WITH R3 LENGTH CHARS
         LR    R5,R4              BUMP OUTPUT POINTER
         LA    R1,12(0,R1)        BUMP INPUT TABLE POINTER
         B     SENDLP             LOOP WHEN FOUND
*
SENDEX   DS    0H
         LM    R1,R6,SENRR        PUSH EM REGS
         L     R14,SENSV          PUSH EM REGS
         BR    R14
*
SENDMOVE MVC   3(*-*,R5),0(R2)     MOVE DATA L'R3 CHARS TO AREA1
SENSV    DS    F
SENRR    DS    6F
*
********************************************************************
*      PRINT CHARACTER                                             *
*      ON ENTRY:  R8 ROW COL VALUE                                 *
*                 R6 CHARACTER TO PRINT                            *
*                 R7 DUPLICATION FACTOR                            *
*      ON EXIT:                       (AX=R0 BX=R1 CX=R14 DX=R15)  *
********************************************************************
PRICHAR  DS    0H
         ST    R14,PRISV               PUSH EM REGS
         STM   R1,R5,PRIRR             PUSH EM REGS
*
         LA    R2,SAVCUR1         ROW,COL FOR CURSUR SET
         BAL   R14,CURSAV1        SAVE CURSOR POSITION
         LR    R2,R8              ROW COL FOR CURSUR SET
         BAL   R14,CURSET1        SET CURSOR POSITION
         LR    R3,R6              SMILY CHARACTER
         LR    R2,R7              DUPLICATION LENGTH
         LA    R5,0               SET TO TEMP R/C
         BAL   R14,DUPCHR1        PRINT
         L     R2,SAVCUR1          ROW,COL FOR CURSUR SET
         BAL   R14,CURSET1        SAVE CURSOR POSITION
*
PRICEX   DS    0H
         LM    R1,R5,PRIRR             POP EM REGS
         L     R14,PRISV               POP EM REGS
         BR    R14
*
PRISV    DS    F
PRIRR    DS    5F
********************************************************************
*      WAIT FOR KEY PRESSED                                        *
*      ON EXIT: R2=KEY                (AX=R0 BX=R1 CX=R14 DX=R15)  *
********************************************************************
KBRWAIT  DS    0H
         ST    R14,WAISV               PUSH EM REGS
*
         LA    R0,X'0000'              READ KEYBOARD BUFFER
         SVC   KEYBOARD                GET KEY
         LR    R2,R0                   GET KEY
         N     R2,=XL4'0000FFFF'       STRIP MS HALF
         STH   R2,KEYREAD              SAVE WHOLE KEY
         TM    R2,X'FF'                EXTENDED?
         BZ    KBRWEX                  YES, DON'T CHANGE
         N     R2,=XL4'000000FF'       LEAVE KEY ONLY
         IC    R2,ASCII1(R2)           TRANSLATE TO EBCDIC
*
KBRWEX   DS    0H
         L     R14,WAISV               POP EM REGS
         BR    R14
*
WAISV    DS    F
*
********************************************************************
*      SAVE CURSOR POSITION                                        *
*      ON ENTRY:  R2 = LOCATION TO SAVE ROW/COL                    *
********************************************************************
CURSAV1  DS    0H
         ST    R14,RTSAV1              PUSH EM REGS
         STM   R1,R2,RRSAV1
*        LA    R2,SAVCUR1               ROW/COL SAVE AREA
*
         LA    R0,X'0300'              GET CURSOR POSITION
         LA    R1,0                    BX=0 PAGE 0
         SVC   VIDEO1                  GET CURSOR ROW,COL IN R15
         ST    R15,0(0,R2)             SAVE IT
*
         LM    R1,R2,RRSAV1            POP EM REGS
         L     R14,RTSAV1
         BR    R14
*
RTSAV1   DS    F                       POP EM REGS
RRSAV1   DS    2F
********************************************************************
*      SET CURSOR POSITION                                         *
*      ON ENTRY:  R2 = LOCATION TO SAVE ROW/COL                    *
********************************************************************
CURSET1  DS    0H
         ST    R14,RTSET1              PUSH EM REGS
         STM   R1,R2,RRSET1
*        L     R2,SAVCUR1               ROW/COL SAVE AREA
*
         LA    R0,X'0200'              SET CURSOR
*        SH    R2,=H'256'              SUBTRACT 1 FROM ROW
         LR    R15,R2                  LOAD VALUE OF CURSOR ROW / COL
         LA    R1,0                    PAGE 0
         SVC   VIDEO1                  RESTORE CURSOR
*
         LM    R1,R2,RRSET1            POP EM REGS
         L     R14,RTSET1
         BR    R14
*
RTSET1   DS    F                       POP EM REGS
RRSET1   DS    2F
********************************************************************
*      CLEAR SCREEN                                                *
*      ON ENTRY:                                                   *
********************************************************************
CLRSCN1  DS    0H
         ST    R14,RTCLR1              PUSH EM REGS
*
         LA    R0,X'0600'              SCROLL
         LA    R14,X'0000'             START ROW/COL (0,0)
         LH    R15,=H'6223'            END ROW/COL X'184F' (24,79)
         LH    R1,=H'1792'             ATTRIBUTE X'0700' NORMAL
         SVC   VIDEO1                  RESTORE CURSOR
*
         L     R14,RTCLR1
         BR    R14
*
RTCLR1   DS    F                       POP EM REGS
********************************************************************
*      DUPLICATE CHARACTER ON THE SCREEN                           *
*      ON ENTRY:  R3 = ADDR OF CHARACTER TO PRINT                  *
*                 R2 = LENGTH                                      *
*                 R5 = LAST ROW/COL                                *
********************************************************************
DUPCHR1  DS    0H
         ST    R14,RTDUP1              PUSH EM REGS
         STM   R1,R5,RRDUP1
*        LA    R3,CHAR                 DUP CHAR ADDR
*        LA    R2,8                    DUP LENGTH
*
*DUPCHRL DS    0H
         LA    R0,X'0900'              WRITE CHAR AND ATTR
         SR    R4,R4                   ERASE
         IC    R4,0(R3)                CHAR TO DISPLAY
         IC    R0,ASCII1(R4)           TRANSLATE TO ASCII
         LA    R1,0                    PAGE 0
         IC    R1,ATTRIB1              SEND ATTR
         LR    R14,R2                  DUP FACTOR = R2
         SVC   VIDEO1                  SEND CHARACTER
         LA    R0,X'0200'              SET CURSOR
         LR    R15,R5                  LOAD VALUE OF CURSOR ROW / COL
         LA    R1,0                    PAGE 0
         SVC   VIDEO1                  RESTORE CURSOR
*
         LM    R1,R5,RRDUP1           POP EM REGS
         L     R14,RTDUP1
         BR    R14
*
RTDUP1   DS    F                       POP EM REGS
RRDUP1   DS    5F
****************************************************************
*  3270 ATTRIBUTE CHARACTER TABLE
****************************************************************
*        +--UNPROT  ALPH/NUM
*        |  +--UNPROT  NUMERIC
*        |  |  +--PROTEC  ALPH/NUM
*        |  |  |  +--PROTEC  AUTOSKIP
*        |  |  |  |
*        40 50 60 F0                              MDT-OFF
*        C1 D1 61 F1                              MDT-ON
*        C4 D4 E4 F4            PEN-DET           MDT-OFF
*        C5 D5 E5 F5            PEN-DET           MDT-ON
*        C8 D8 E8 F8  HI-INTNS  PEN-DET           MDT-OFF
*        C9 D9 E9 F9  HI-INTNS  PEN-DET           MDT-ON
*        4C 5C 6C 7C  --------  -------  NON-DSP  MDT-OFF
*        4D 5D 6D 7D  --------  -------  NON-DSP  MDT-ON
*                        A A A
*                          P N    H     M
*                      1 1 1 1    1 1 1 1
*                        N        N N
****************************************************************
*         DS    0D
*FIELDCU1 DC    X'00000C24'         FIRST ROW/COL
*FIELDLO1 DC    A(FIELDTAB)     INITIAL TABLE POINTER
*FIELDTA1 EQU   *         FROM             TO
*                 ATTR   ROW/COL  LEN    ROW/COL  DATA-ADDR
*         DC    X'0040',X'0C23',X'0008',X'0C2C',A(VARFLDTB)
*         DC    X'0040',X'0F23',X'0008',X'0F2C',A(VARFLDTB+24)
*         DC    X'0000',X'0000',X'0000',X'0000',X'00000000'
*         DC    X'FFFF',X'0000'            TABLE DELIMITER
*                          35  .... ....   44
*LASTFLDP DC    A(VARFLDTB)    VARIABLE FIELD TABLE POINTER
*VARFLDTB DC    CL250' '       VARIABLE FIELD TABLE FOR INPUT DATA
*         DC    CL250' '
*VARFLDTE EQU   *              DELIMITER ADDRESS
********************************************************************
COMMD    DC    V(AREA1)        COMMAND AREA
VIDEO1   EQU   128+16      ROM BIOS VIDEO (INT 10H)
KEYBOARD EQU   128+22      KEYBOARD (INT 16H)
ROWS     DS    0H
         DC    X'00'
ROWS2    DC    X'00'       ROW
COLS     DS    0H
         DC    X'00'
COLS2    DC    X'00'       COL
SAVCUR1  DS    0F          ORIGINAL CURSOR POSITION
         DC    H'0'
ROWS1    DC    X'00'       ROW
COLS1    DC    X'00'       COL
SAVCUR3  DS    0F          CURSOR POSITION
         DC    H'0'
ROWS3    DC    X'00'       ROW
COLS3    DC    X'00'       COL
RETCODE1 DC    F'0'        RETURN CODE
*
RCLOC    DS    F                 INITIAL TABLE POS
KEYREAD1 DS    0F                KEY READ
         DC    H'0'              KEY READ
KEYREAD  DC    H'0'              KEY READ
KEYS     EQU   *
KUP      DC    XL2'4800',X'01'   UP ARROW KEY
KDN      DC    XL2'5000',X'02'   DOWN ARROW KEY
KLF      DC    XL2'4B00',X'03'   LEFT ARROW KEY
KRT      DC    XL2'4D00',X'04'   RIGHT ARROW KEY
KESC     DC    XL2'011B',X'05'   ESC ARROW KEY  CLEAR SCREEN
KF1      DC    XL2'3B00',X'06'   F1
KF2      DC    XL2'3C00',X'07'   F2
KF3      DC    XL2'3D00',X'08'   F3
KF4      DC    XL2'3E00',X'09'   F4
KF5      DC    XL2'3F00',X'0A'   F5
KF6      DC    XL2'4000',X'0B'   F6
KF7      DC    XL2'4100',X'0C'   F7
KF8      DC    XL2'4200',X'0D'   F8
KF9      DC    XL2'4300',X'0E'   F9
KF10     DC    XL2'4400',X'0F'   F10
KTABR    DC    XL2'0F09',X'10'   TAB RIGHT
KTABL    DC    XL2'0F00',X'11'   TAB LEFT
KINS     DC    XL2'5200',X'12'   INSERT
KDEL     DC    XL2'5300',X'13'   DELETE
KENT     DC    XL2'1C0D',X'14'   ENTER
KBS      DC    XL2'0E08',X'15'   BACK SPACE
         DC    XL2'0000'         DELIMITER
*
ATTRIB1  DC    X'07'             NORMAL ATTRIBUTE
KBLOCK   DC    C' '              KEYBOARD LOCK SWITCH
INSERT   DC    X'05'             INSERT TOGGLE SWITCH
********************************************************************
COMMAND  DC    X'00'         KEY COMMAND PRESSED
         DC    XL2'00'       ROW COL
         DC    X'00'         ORDER CODE
         DC    XL2'00'       FIELD ROW/COL
********************************************************************
ASCII1   DS    0CL256            EBCDIC TO ASCII CONVERTION
*                .0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F
         DC    X'2001C4EDFB5E20202020202020202020' 0.
         DC    X'20202020202020202020202020202020' 1.
         DC    X'20202020202020202020202020202020' 2.
         DC    X'20202020202020202020202020202020' 3.
         DC    X'20202020202020202020202E3C282B7C' 4.
         DC    X'2620202020202020202021242A293B5E' 5.
         DC    X'2D2F2020202020202020202C255F3E3F' 6.
         DC    X'202020202020202020603A2340273D22' 7.
         DC    X'20616263646566676869207B20202020' 8.
         DC    X'206A6B6C6D6E6F707172207D20202020' 9.
         DC    X'207E737475767778797A2020205B2020' A.
         DC    X'202020202020202020202020205D2020' B.
         DC    X'20414243444546474849202020202020' C.
         DC    X'204A4B4C4D4E4F505152202020202020' D.
         DC    X'5C20535455565758595A202020202020' E.
         DC    X'30313233343536373839202020202020' F.
*
EBCDIC   DS    0CL256            ASCII TO EBCDIC CONVERTION
*                .0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F
         DC    X'00000000006DF100F300000000007A7B' 0.
         DC    X'110012007D0000000000000000000000' 1.
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61' 2.
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F' 3.
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6' 4.
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D' 5.
         DC    X'79818283848586878889919293949596' 6.
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA17F' 7.
         DC    X'00000000000000000000000000000000' 8.
         DC    X'00000000000000000000000000000000' 9.
         DC    X'00000000000000000000000000000000' A.
         DC    X'00000000000000000000000000000000' B.
         DC    X'00000000000000000000000000000000' C.
         DC    X'00000000000000000000000000000000' D.
         DC    X'00000000000000000000000000000000' E.
         DC    X'00000000000000000000000000000000' F.
*
*AREA1    DS    0CL1000
*         DC    CL250' '
*         DC    CL250' '
*         DC    CL250' '
*         DC    CL250' '
*AREA1END EQU   *
         COPY  \R42\CPY\EQUREGS.CPY
FIELDPAR DSECT
FIELDCU1 DS    F               INITIAL CURSOR POSITION
FIELDLO1 DS    F               INITIAL TABLE POINTER
FIELDTA1 EQU   *               TABLE ADDRESS
         END   WIN
